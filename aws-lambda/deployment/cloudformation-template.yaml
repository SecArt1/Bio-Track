AWSTemplateFormatVersion: '2010-09-09'
Description: 'BioTrack IoT Infrastructure - AWS IoT Core, Lambda, and API Gateway'

Parameters:
  ProjectName:
    Type: String
    Default: biotrack
    Description: Name of the project
  
  FirebaseProjectId:
    Type: String
    Default: bio-track-de846
    Description: Firebase project ID
  
  FirebasePrivateKey:
    Type: String
    NoEcho: true
    Description: Firebase service account private key
  
  FirebaseClientEmail:
    Type: String
    Description: Firebase service account client email

Resources:
  # IAM Role for Lambda function
  BioTrackLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: IoTDataAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:Publish
                  - iot:Subscribe
                  - iot:Connect
                  - iot:Receive
                  - iot:GetThingShadow
                  - iot:UpdateThingShadow
                  - iot:DeleteThingShadow
                Resource: '*'
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda function for IoT to Firebase bridge
  BioTrackIoTBridgeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-iot-bridge'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt BioTrackLambdaRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Lambda function placeholder');
            return { statusCode: 200, body: 'OK' };
          };
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          FIREBASE_PROJECT_ID: !Ref FirebaseProjectId
          FIREBASE_PRIVATE_KEY: !Ref FirebasePrivateKey
          FIREBASE_CLIENT_EMAIL: !Ref FirebaseClientEmail
          AWS_IOT_ENDPOINT: !GetAtt BioTrackIoTEndpoint.EndpointAddress

  # Lambda permission for IoT Rule
  IoTRuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BioTrackIoTBridgeLambda
      Principal: iot.amazonaws.com
      SourceArn: !GetAtt BioTrackTelemetryRule.Arn

  # IoT Policy for devices
  BioTrackDevicePolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-device-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/${ProjectName}-device-*'
          - Effect: Allow
            Action:
              - iot:Publish
            Resource:
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${ProjectName}/device/*/telemetry'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${ProjectName}/device/*/status'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${ProjectName}/device/*/responses'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/thing/*/shadow/update'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/thing/*/shadow/get'
          - Effect: Allow
            Action:
              - iot:Subscribe
            Resource:
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/${ProjectName}/device/*/commands'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/$aws/thing/*/shadow/update/delta'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/$aws/thing/*/shadow/get/accepted'
          - Effect: Allow
            Action:
              - iot:Receive
            Resource:
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${ProjectName}/device/*/commands'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/thing/*/shadow/update/delta'
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/$aws/thing/*/shadow/get/accepted'
          - Effect: Allow
            Action:
              - iot:GetThingShadow
              - iot:UpdateThingShadow
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thing/${ProjectName}-device-*'

  # IoT Rule for telemetry data
  BioTrackTelemetryRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub '${ProjectName}_telemetry_rule'
      TopicRulePayload:
        Description: 'Process telemetry data from BioTrack devices'
        Sql: !Sub "SELECT *, topic() as topic, timestamp() as timestamp FROM '${ProjectName}/device/+/telemetry'"
        Actions:
          - Lambda:
              FunctionArn: !GetAtt BioTrackIoTBridgeLambda.Arn

  # IoT Rule for device status
  BioTrackStatusRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub '${ProjectName}_status_rule'
      TopicRulePayload:
        Description: 'Process status updates from BioTrack devices'
        Sql: !Sub "SELECT *, topic() as topic, timestamp() as timestamp FROM '${ProjectName}/device/+/status'"
        Actions:
          - Lambda:
              FunctionArn: !GetAtt BioTrackIoTBridgeLambda.Arn

  # IoT Rule for device responses
  BioTrackResponseRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub '${ProjectName}_response_rule'
      TopicRulePayload:
        Description: 'Process responses from BioTrack devices'
        Sql: !Sub "SELECT *, topic() as topic, timestamp() as timestamp FROM '${ProjectName}/device/+/responses'"
        Actions:
          - Lambda:
              FunctionArn: !GetAtt BioTrackIoTBridgeLambda.Arn

  # API Gateway for device commands
  BioTrackAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-api'
      Description: 'API for BioTrack device commands'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  APIDeviceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BioTrackAPI
      ParentId: !GetAtt BioTrackAPI.RootResourceId
      PathPart: device

  # API Gateway Command Resource
  APICommandResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BioTrackAPI
      ParentId: !Ref APIDeviceResource
      PathPart: command

  # API Gateway Method
  APICommandMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BioTrackAPI
      ResourceId: !Ref APICommandResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BioTrackIoTBridgeLambda.Arn}/invocations'

  # Lambda permission for API Gateway
  APILambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BioTrackIoTBridgeLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${BioTrackAPI}/*/POST/device/command'

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: APICommandMethod
    Properties:
      RestApiId: !Ref BioTrackAPI
      StageName: prod

  # Get IoT Endpoint
  BioTrackIoTEndpoint:
    Type: AWS::IoT::DomainConfiguration
    Properties:
      DomainConfigurationName: !Sub '${ProjectName}-endpoint'
      ServiceType: DATA

Outputs:
  IoTEndpoint:
    Description: 'AWS IoT Core endpoint'
    Value: !GetAtt BioTrackIoTEndpoint.EndpointAddress
    Export:
      Name: !Sub '${ProjectName}-iot-endpoint'

  APIEndpoint:
    Description: 'API Gateway endpoint for device commands'
    Value: !Sub 'https://${BioTrackAPI}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${ProjectName}-api-endpoint'

  LambdaFunctionArn:
    Description: 'ARN of the IoT Bridge Lambda function'
    Value: !GetAtt BioTrackIoTBridgeLambda.Arn
    Export:
      Name: !Sub '${ProjectName}-lambda-arn'

  DevicePolicyName:
    Description: 'Name of the IoT device policy'
    Value: !Ref BioTrackDevicePolicy
    Export:
      Name: !Sub '${ProjectName}-device-policy'
